// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XactJobs.TestModel.MySql;

#nullable disable

namespace XactJobs.TestModel.MySql.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("XactJobs.TestModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("XactJobs.XactJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int")
                        .HasColumnName("error_count");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("error_message");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("longtext")
                        .HasColumnName("error_stack_trace");

                    b.Property<DateTime?>("ErrorTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("error_time");

                    b.Property<DateTime?>("LeasedUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("leased_until");

                    b.Property<Guid?>("Leaser")
                        .HasColumnType("char(36)")
                        .HasColumnName("leaser");

                    b.Property<string>("MethodArgs")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method_args");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method_name");

                    b.Property<Guid?>("PeriodicJobId")
                        .HasColumnType("char(36)")
                        .HasColumnName("periodic_job_id");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("queue");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_job");

                    b.HasIndex("PeriodicJobId")
                        .HasDatabaseName("ix_job_periodic_job_id");

                    b.HasIndex("Queue", "ScheduledAt")
                        .HasDatabaseName("ix_job_queue_scheduled_at");

                    b.ToTable("xact_jobs__job", (string)null);
                });

            modelBuilder.Entity("XactJobs.XactJobArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completed_at");

                    b.Property<string>("CronExpression")
                        .HasColumnType("longtext")
                        .HasColumnName("cron_expression");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int")
                        .HasColumnName("error_count");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext")
                        .HasColumnName("error_message");

                    b.Property<string>("ErrorStackTrace")
                        .HasColumnType("longtext")
                        .HasColumnName("error_stack_trace");

                    b.Property<DateTime?>("ErrorTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("error_time");

                    b.Property<string>("MethodArgs")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method_args");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method_name");

                    b.Property<Guid?>("PeriodicJobId")
                        .HasColumnType("char(36)")
                        .HasColumnName("periodic_job_id");

                    b.Property<string>("PeriodicJobName")
                        .HasColumnType("longtext")
                        .HasColumnName("periodic_job_name");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("queue");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("scheduled_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("pk_job_archive");

                    b.HasIndex("CompletedAt")
                        .HasDatabaseName("ix_job_archive_completed_at");

                    b.ToTable("xact_jobs__job_archive", (string)null);
                });

            modelBuilder.Entity("XactJobs.XactJobPeriodic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cron_expression");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("MethodArgs")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method_args");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("method_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("queue");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_job_periodic");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_job_periodic_name");

                    b.ToTable("xact_jobs__job_periodic", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
